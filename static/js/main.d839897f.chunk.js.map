{"version":3,"sources":["Nav.js","axios.js","requests.js","Banner.js","Row.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","useState","show","handleShow","useEffect","window","addEventListener","scrollY","removeEventListener","className","src","alt","instance","axios","create","baseURL","TMDB_API_KEY","process","requests","fetchTrendingAllWeek","fetchTrendingMovieWeek","fetchTrendingTvWeek","fetchTrendingPersonWeek","fetchTrendingAllDay","fetchTrendingMovieDay","fetchTrendingTvDay","fetchTrendingPersonDay","fetchMovieTopRated","fetchMoviePopular","fetchMovieLatest","fetchTvTopRated","fetchTvPopular","fetchTvLatest","fetchDiscoverMovieAction","fetchDiscoverMovieComedy","fetchDiscoverMovieHorror","fetchDiscoverMovieRomance","fetchDiscoverMovieDocumentary","fetchNetflixOriginals","Banner","str","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","poster_path","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","id","videoId","opts","height","width","playerVars","autoplay","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d839897f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false)\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', () => {\r\n            if(window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener('scroll')\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={`nav ${show && 'nav__black'}`}>\r\n            <img \r\n                className='nav__logo'\r\n                src='https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/200px-Netflix_2015_logo.svg.png'\r\n                alt='Netflix Logo' \r\n            />\r\n\r\n            <img \r\n                className='nav__avatar'\r\n                src='https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png'\r\n                alt='Netflix Logo' \r\n            />\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://api.themoviedb.org/3',\r\n});\r\n\r\nexport default instance;","const TMDB_API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n\r\nconst requests = {\r\n  fetchTrendingAllWeek: `/trending/all/week?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  fetchTrendingMovieWeek: `/trending/movie/week?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  fetchTrendingTvWeek: `/trending/tv/week?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  fetchTrendingPersonWeek: `/trending/person/week?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  \r\n  fetchTrendingAllDay: `/trending/all/day?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  fetchTrendingMovieDay: `/trending/movie/day?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  fetchTrendingTvDay: `/trending/tv/day?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  fetchTrendingPersonDay: `/trending/person/day?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  \r\n  fetchMovieTopRated: `/movie/top_rated?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  fetchMoviePopular: `/movie/popular?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  fetchMovieLatest: `/movie/latest?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  \r\n  fetchTvTopRated: `/tv/top_rated?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  fetchTvPopular: `/tv/popular?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  fetchTvLatest: `/tv/latest?api_key=${TMDB_API_KEY}&language=en-US`,\r\n  \r\n  fetchDiscoverMovieAction: `/discover/movie?api_key=${TMDB_API_KEY}&with_genres=28`,\r\n  fetchDiscoverMovieComedy: `/discover/movie?api_key=${TMDB_API_KEY}&with_genres=35`,\r\n  fetchDiscoverMovieHorror: `/discover/movie?api_key=${TMDB_API_KEY}&with_genres=27`,\r\n  fetchDiscoverMovieRomance: `/discover/movie?api_key=${TMDB_API_KEY}&with_genres=10749`,\r\n  fetchDiscoverMovieDocumentary: `/discover/movie?api_key=${TMDB_API_KEY}&with_genres=99`,\r\n  \r\n  fetchNetflixOriginals: `/discover/tv?api_key=${TMDB_API_KEY}&with_networks=213`,\r\n};\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react'\r\n\r\nimport './Banner.css'\r\nimport axios from './axios'\r\nimport requests from './requests'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState(null);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n            ])\r\n        }\r\n        fetchData();\r\n    }, [])\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n-1) + '...' : str;\r\n    }\r\n\r\n    return (\r\n        <header className='banner'\r\n            style={{\r\n                backgroundSize: 'cover',\r\n                backgroundImage: `url(\r\n                    'https://image.tmdb.org/t/p/original/${movie?.backdrop_path}'\r\n                )`,\r\n                backgroundPosition: 'center center'\r\n            }}\r\n        > \r\n            <div className='banner__contents'>\r\n                <h1 className='banner__title'>\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n\r\n                <div className='banner__buttons'>\r\n                    <button className='banner__button'>Play</button>\r\n                    <button className='banner__button'>My List</button>\r\n                </div>\r\n\r\n                <h1 className='banner__description'>\r\n                    {truncate(movie?.overview, 150)}\r\n                </h1>\r\n            </div>\r\n\r\n            <div className='banner__fadeBottom' />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport YouTube from 'react-youtube';\r\n\r\nimport movieTrailer from 'movie-trailer'\r\n\r\nimport './Row.css'\r\nimport axios from './axios';\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original/';\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState('');\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n        }\r\n\r\n        fetchData();\r\n    }, [fetchUrl])\r\n    \r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n            autoplay: 1\r\n        }\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if(trailerUrl) {\r\n            setTrailerUrl('')\r\n        } else {\r\n            movieTrailer(movie?.name || '')\r\n                .then((url) => {\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n                })\r\n                .catch((error) => console.log(error))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n\r\n            <div className='row__posters' >\r\n                {movies.map((movie) => (\r\n                    <img\r\n                        key={movie.id}\r\n                        className={`row__poster ${isLargeRow && 'row__posterLarge'}`}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                        alt={movie.name} \r\n                        onClick={() => handleClick(movie)}\r\n                    />\r\n                ))}\r\n            </div>\r\n            \r\n            {trailerUrl &&\r\n                <YouTube \r\n                    videoId={trailerUrl}\r\n                    opts={opts}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import './App.css';\n\nimport Nav from './Nav';\nimport Banner from './Banner';\nimport Row from './Row';\n\nimport requests from './requests';\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <Nav />\n            <Banner />\n\n            <Row title=\"NETFLIX ORIGINALS\" \n                fetchUrl={requests.fetchNetflixOriginals} \n                isLargeRow={true}/>\n            \n            <Row title=\"Trending Now\" \n                fetchUrl={requests.fetchTrendingAllDay}/>\n\n            <Row title=\"TopRated\" \n                fetchUrl={requests.fetchMovieTopRated}/>\n            \n            <Row title=\"Popular\" \n                fetchUrl={requests.fetchMoviePopular}/>\n            \n            <Row title=\"Action Movies\" \n                fetchUrl={requests.fetchDiscoverMovieAction}/>\n            <Row title=\"Comedy Movies\" \n                fetchUrl={requests.fetchDiscoverMovieComedy}/>\n            <Row title=\"Horror Movies\" \n                fetchUrl={requests.fetchDiscoverMovieHorror}/>\n            <Row title=\"Romance Movies\" \n                fetchUrl={requests.fetchDiscoverMovieRomance}/>\n            <Row title=\"Documentaries\" \n                fetchUrl={requests.fetchDiscoverMovieDocumentary}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}